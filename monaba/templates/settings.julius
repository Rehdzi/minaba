document.addEventListener("DOMContentLoaded", function(event) {
    var sf    = document.getElementById("settings-form-container");
    var jsf   = document.createElement("div");
    var table = document.createElement("table");
    var tbody = document.createElement("tbody");
    sf.appendChild(jsf);
    jsf.appendChild(table);
    table.appendChild(tbody);

    var tr  = document.createElement("tr");

    var td1 = document.createElement("td");
    var span = document.createElement("span");
    span.innerHTML = #{toJSON $ msgrender MsgJSFeatures};
    var i  = document.createElement("i");
    i.className = 'fa fa-wrench';
    td1.appendChild(i);
    td1.appendChild(span);

    var td2 = document.createElement("td");
    var input = document.createElement("input");
    input.type = 'submit';
    input.value = #{toJSON $ msgrender MsgResetDefaults};
    input.onclick = function() { resetConfig() };
    td2.appendChild(input);

    tr.appendChild(td1);
    tr.appendChild(td2);
    tbody.appendChild(tr);

    var opts = [
                ["checkbox", "remember_password"                 , #{toJSON $ msgrender MsgRememberPassword}],
                ["checkbox", "desktop_notification"              , #{toJSON $ msgrender MsgDesktopNotification}],
                ["number"  , "board_stats_update"                , #{toJSON $ msgrender MsgBoardStatsUpdate}],
                ["checkbox", "eventsource"                       , #{toJSON $ msgrender MsgEventsource}],
                ["checkbox", "expand_files_in_post"              , #{toJSON $ msgrender MsgExpandFilesInPost}],
                ["number"  , "posts_autoload_interval"           , #{toJSON $ msgrender MsgPostsAutoloadInterval}],
                ["checkbox", "mathjax"                           , #{toJSON $ msgrender MsgMathjax}],
                ["number"  , "animation_speed"                   , #{toJSON $ msgrender MsgAnimationSpeed}],
                ["number"  , "popup_message_display_time"        , #{toJSON $ msgrender MsgPopupMessageDisplayTime }],
                ["number"  , "popup_post_delay_before_displaying", #{toJSON $ msgrender MsgPopupPostDelayBeforeDisplaying}],
                ["checkbox", "popup_post_removing_on_mouse_out"  , #{toJSON $ msgrender MsgPopupPostRemovingOnMouseOut}],
                ["number"  , "popup_post_delay_before_removing"  , #{toJSON $ msgrender MsgPpopupPostDelayBeforeRemoving}],
                ["checkbox", "video_remember_volume"             , #{toJSON $ msgrender MsgVideoRememberVolume}],
                ["double"  , "video_default_volume"              , #{toJSON $ msgrender MsgVideoDefaultVolume}],
                ["checkbox", "video_autoplay"                    , #{toJSON $ msgrender MsgVideoAutoplay}],
                ["checkbox", "video_loop"                        , #{toJSON $ msgrender MsgVideoLoop}],
                ["number"  , "video_scale_width"                 , #{toJSON $ msgrender MsgVideoScaleWidth}],
                ["number"  , "video_scale_height"                , #{toJSON $ msgrender MsgVideoScaleHeight}],
                ["checkbox", "vimeo_enable"                      , #{toJSON $ msgrender MsgVimeoEnable}],
                ["checkbox", "coub_enable"                       , #{toJSON $ msgrender MsgCoubEnable}],
                ["checkbox", "youtube_enable"                    , #{toJSON $ msgrender MsgYoutubeEnable}],
                ["checkbox", "youtube_load_titles"               , #{toJSON $ msgrender MsgYoutubeLoadTitles}],
                ["checkbox", "youtube_html5"                     , #{toJSON $ msgrender MsgYoutubeHtml5}],
                ["number"  , "url_video_width"                   , #{toJSON $ msgrender MsgUrlVideoWidth}],
                ["number"  , "url_video_height"                  , #{toJSON $ msgrender MsgUrlVideoHeight}],
                ["number"  , "flash_width"                       , #{toJSON $ msgrender MsgFlashWidth}],
                ["number"  , "flash_height"                      , #{toJSON $ msgrender MsgFlashHeight}],
                ["text"    , "iframely_API_key"                  , #{toJSON $ msgrender MsgIframelyAPIKey}],
                ["text"    , "youtube_API_key"                   , #{toJSON $ msgrender MsgYoutubeAPIKey}],
                ["checkbox", "css_wide_posts"                    , #{toJSON $ msgrender MsgCssWidePosts}],
                ["number"  , "css_side_margin"                   , #{toJSON $ msgrender MsgCssSideMargin}],
                ["checkbox", "css_hide_files_names"              , #{toJSON $ msgrender MsgCssHideFilesNames}],
                ["checkbox", "css_hide_files_info"               , #{toJSON $ msgrender MsgCssHideFilesInfo}],
                ["checkbox", "css_hide_markup_buttons"           , #{toJSON $ msgrender MsgCssHideMarkupButtons}],
                ["number"  , "css_attachment_thumb_width"        , #{toJSON $ msgrender MsgCssAttachmentThumbWidth}],
                ["text"    , "css_custom"                        , #{toJSON $ msgrender MsgCssCustom}],
               ];
    console.log(opts);
    opts.forEach(function(x, i) {
        var tr  = document.createElement("tr");
        var td1 = document.createElement("td");
        var td2 = document.createElement("td");
        var type = x[0];
        var input = type == 'text' ? document.createElement('textarea') : document.createElement("input");
        var opt = "cnf_"+x[1];
        td1.innerHTML = x[2];
        var e = function() { setItem(opt, type == "checkbox" ? this.checked : this.value) };
        input.oninput = e; input.onchange = e;
        if (type != "double")
            input.type = type;
        else {
            input.type = "number";
            input.step = "0.01";
        }
        if (type == "checkbox")
            input.checked = getItem(opt);
        else
            input.value = getItem(opt);
        td2.appendChild(input);
        tr.appendChild(td1);
        tr.appendChild(td2);
        tbody.appendChild(tr);
    });
});


function showThread(threadLocalId, board) {
    httpRequest({
        action: "/ajax/unhide/thread/"+board+"/"+threadLocalId,
        headers: { 'Accept': 'application/json' },
        onloadOk: function() {
            var ht = document.getElementById('hidden-thread-elem-'+board+'-'+threadLocalId);
            ht.parentNode.removeChild(ht);
            var b = document.getElementById('hidden-threads-board-'+board);
            if (b.getElementsByTagName('td').length == 0) {
                b.parentNode.removeChild(b);
            }
            var tl = document.getElementById('hidden-threads-list');
            if (tl.getElementsByClassName('hidden-threads-board').length == 0) {
                tl.parentNode.removeChild(tl);
            }
        }
    });
}
