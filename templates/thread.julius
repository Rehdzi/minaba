document.addEventListener("DOMContentLoaded", function(event) {
    fillPasswords();
    checkHighlighted();
    makeRefmap();
    initAllPosts();
    initCodeButton('post-form',#{toJSON $ msgrender MsgPlainText});
    initSymbolCounter('post-form');
    initCodeButton('edit-form',#{toJSON $ msgrender MsgPlainText});
    initSymbolCounter('edit-form');
    initMathjax();

    var postform = document.getElementById('post-form');
    postform.onsubmit = function(event) {
        var inputs = postform.getElementsByTagName("input");
        var formData = new FormData();
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type != "submit") {
                if (inputs[i].files != null)
                    formData.append(inputs[i].name, inputs[i].files[0] || "");
                else
                    formData.append(inputs[i].name, inputs[i].value || "");
            }
        }
        var textarea = postform.getElementsByTagName("textarea")[0];
        formData.append(textarea.name, textarea.value);
        var select = postform.getElementsByTagName("select")[0];
        formData.append(select.name, 1);

        var pmsg;
        var request = new XMLHttpRequest();
        request.open('POST', postform.action, true);
        request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        request.onloadstart = function() {
            pmsg = popupMessage(#{toJSON $ msgrender MsgLoading}, null, true);
        };
        request.onload = function() {
            refreshCaptcha();
            closePopupMessage(pmsg);
            if (request.status >= 200 && request.status < 400) {
                var data = JSON.parse(request.responseText);
                if (data.ok) {
                    clearPostFormFields();
                    popupMessage(data.ok, Monaba.cnf.popupMessageDelay);
                    closePostForm();
                    var thread   = document.getElementsByClassName("thread")[0];
                    var threadId = /thread-(\d+)/.exec( thread.id )[1];
                    var board    = thread.dataset.board;
                    refreshThread(board, threadId);
                } else {
                    popupMessage(data.error, Monaba.cnf.popupMessageDelay);
                }
            } else {
                popupMessage(request.responseText+" ("+request.status+")", 0, false, true);
            }
        };
        request.onerror = function() {
            popupMessage(#{toJSON $ msgrender MsgConnectionError}+" ("+request.statusText+")", 0, false, true);
        };
        request.send(formData);
        event.preventDefault();
    };

});

function showQuickPostForm(postId) {
    var p = document.getElementById(postId);
    var pf = document.getElementById('post-form');
    pf.className = "quick-post-form";
    insertAfter(pf, p);
    p.parentNode.insertBefore( pf, p.nextSibling );
    pf.style.display = 'table';
    document.getElementById("go-back-block").style.display = 'none';
} 

function showPlainPostForm() {
    var pf = document.getElementById('post-form');
    pf.className = "plain-post-form";
    var spf = document.getElementsByClassName('show-plain-form')[0];
    insertAfter(pf, spf);
    spf.style.display = 'none';
    pf.style.display = 'block';
}
