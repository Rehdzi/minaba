Array.prototype.contains = function(obj) {
    var i = this.length;
    while (i--) {
        if (this[i] === obj) {
            return true;
        }
    }
    return false;
}
//-----------------------------------------------------------------
var Monaba = {
    zindex: 10,
    expThreads: {},
    refMap: {},
    postCache: {},
    cnf: {
        mathjax: false,
        animationSpeed: 300,
        popupMessageDelay: 2000,
        popupPostDelay: 500,
        video: {
            autoplay: true,
            loop: true,
            scale: 1.5,
        },
        youtube: {
            enable: true,
            loadTitles: false,
            html5: true,
            width: 360,
            height: 270,
        }
    }
};

function initAllPosts() {
    initImageExpanding();
    initVideoPlayer();
    initUrlVideoPlayer();
    initPopupsCache();
}

function initMathjax() {
    if (!Monaba.cnf.mathjax)
        return;
    var head = document.getElementsByTagName('head')[0];        
    var script = document.createElement('script');
    script.src = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML";
    script.onload = function() {
        MathJax.Hub.Config({
            tex2jax: {
                inlineMath : [ ['[l]','[/l]'],
                               ['$','$'],
                               ['\\(','\\)']
                             ],
                displayMath: [ ['[latex]','[/latex]'],
                               ['$$','$$'],
                               ["\\[","\\]"]
                             ],
                processEscapes: true
            },
        });
    };
    head.appendChild(script);
}

function refreshMathjax() {
    if (Monaba.cnf.mathjax)
        MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
}

function initOnePost(post) {
    expandImage(post);
    addVideoPlayer(post);
    addUrlVideoPlayer(post);
}
//-----------------------------------------------------------------
// deletion checkboxes
//-----------------------------------------------------------------
function markToDelete(container) {
    var input = container.querySelector('input');
    var icon   = container.querySelector('i');
    if (input.checked == false) {
        input.checked = true;
        icon.style.opacity = 0.3;
    } else {
        input.checked = false;
        icon.style.opacity = 1;
    }
}

//-----------------------------------------------------------------
// Forms
//-----------------------------------------------------------------
function clearPostFormFields() {
    var postform = document.getElementById('post-form');
    var inputs = postform.getElementsByTagName("input");    
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].type == "checkbox" || inputs[i].type == "file")
            inputs[i].value = "";
    }
    var textarea = postform.getElementsByTagName("textarea")[0];
    textarea.value = "";
}

function generatePassword(n) {
    if(!n) {
        n = 8;
    }
    var password = '';
    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < n; i++) {
        password += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
    }
    return password;
}

function fillPasswords() {
    var password = get_cookie("password");
    if (!password) {
        password = generatePassword();
        set_cookie('password', password);
    }
    Array.prototype.forEach.call(document.querySelectorAll('input[type=password]'), function(el, i) {
        el.value = password;
    });
}

function countSymbols(formId) {
    var maxLen = document.getElementById(formId).dataset.maxMsgLength;
    var len = document.querySelector('#'+formId+' textarea').value.length;
    
    // FIX: feed page
    if (maxLen == null) {
        document.querySelector('#'+formId+' textarea').innerHTML = len;
        return;
    }
    var sc = document.querySelector('#'+formId+' .symbol-counter');
    if (len > maxLen) {
        sc.innerHTML = len+'/'+maxLen;
        sc.style.color = 'red';
    } else {
        sc.innerHTML = len;
        sc.style.color = 'green';
    }
}

function initSymbolCounter(formId) {
    var h = function() { countSymbols(formId); };
    ['onchange','oncut','onpaste','onkeyup'].forEach(function(ev,j) {
        document.querySelector('#'+formId+' textarea')[ev] = h;
    });
    if (formId == 'post-form') countSymbols(formId);
}


function clearFile(fileId) {
    document.getElementById(fileId).value = "";
}

function closePostForm() {
    Array.prototype.forEach.call(document.querySelectorAll('.show-plain-form'), function(el, i) {
        el.style.display = 'block';
    });
    document.getElementById('post-form').style.display = 'none';
}

// textarea
function insert(text, parentId) {
    var textarea = document.getElementById(parentId).querySelector('textarea');
    if (textarea.createTextRange && textarea.caretPos) { // IE
        var caretPos = textarea.caretPos;
        caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == " " ? text + " " : text;
    } else if(textarea.setSelectionRange) { // Firefox
        var start = textarea.selectionStart;
        var end   = textarea.selectionEnd;
        textarea.value = textarea.value.substr(0, start) + text + textarea.value.substr(end);
        textarea.setSelectionRange(start + text.length, start + text.length);
    } else {
        textarea.value += text + " ";
    }
    textarea.focus();
    // $(textarea).trigger('autosize.resize');
} 

function insertQuote(parentId) {
    insert(">"+ window.getSelection().toString().replace(/\n/gm, "\n>")+"\n", parentId);
}

function insertTag(open, close, parentId) {
    var textarea = document.getElementById(parentId).querySelector('textarea');
    var start = textarea.selectionStart; 
    var end = textarea.selectionEnd;
    var len = textarea.value.length; 
    var txt = open + textarea.value.substring(start, end) + close; 
    textarea.value = textarea.value.substring(0, start) + txt + textarea.value.substring(end, len);
    // $(textarea).trigger('autosize.resize');
} 

function initCodeButton(formId,plaintext) {
    var codeLangs = {
        text: plaintext,
        actionscript: "ActionScript",
        actionscript3: "ActionScript 3",
        ada: "Ada",
        applescript: "AppleScript",
        asm: "ASM",
        asp: "ASP",
        avisynth: "AviSynth",
        bash: "Bash",
        bf: "Brainfuck",
        blitzbasic: "BlitzBasic",
        c: "C",
        cobol: "COBOL",
        cpp: "C++",
        csharp: "C#",
        css: "CSS",
        d: "D",
        delphi: "Delphi",
        diff: "Diff",
        dos: "DOS",
        fortran: "Fortran",
        haskell: "Haskell",
        html4strict: "HTML",
        ini: "INI",
        java: "Java",
        javascript: "Javascript",
        latex: "LaTeX",
        lisp: "Lisp",
        lua: "Lua",
        make: "GNU make",
        matlab: "Matlab M",
        mirc: "mIRC Scripting",
        mpasm: "Microchip Assembler",
        mxml: "MXML",
        mysql: "MySQL",
        objc: "Objective-C",
        ocaml: "OCaml",
        pascal: "Pascal",
        perl: "Perl",
        php: "PHP",
        pic16: "PIC16",
        powershell: "posh",
        prolog: "Prolog",
        python: "Python",
        qbasic: "QBasic/QuickBASIC",
        rails: "Rails",
        ruby: "Ruby",
        scala: "Scala",
        smalltalk: "Smalltalk",
        smarty: "Smarty",
        sql: "SQL",
        tcl: "TCL",
        tsql: "T-SQL",
        vb: "Visual Basic",
        vbnet: "vb.net",
        xml: "XML",
    };
    var cm = document.getElementById('code-markup-'+formId);
    var cm_select = document.getElementById('code-markup-select-'+formId);

    cm = document.createElement('div');
    cm.id = "code-markup-"+formId;
    cm.style.position = 'absolute';
    cm.style.display = 'none';
    cm.style['z-index'] = '9999999';

    cm_select = document.createElement('select');
    cm_select.size = 8;
    cm_select.id = "code-markup-select-"+formId;
    cm_select.multiple = "multiple";

    for(var lang_id in codeLangs) {
        var o = document.createElement('option');
        o.value = lang_id;
        o.innerHTML = codeLangs[lang_id];
        cm_select.appendChild(o);
    }
    cm.appendChild(cm_select);
    document.body.appendChild(cm);

    document.querySelector('#'+formId+' .button-code').onclick = function(e) {
        Array.prototype.forEach.call(document.querySelectorAll('#code-markup-select-'+formId+' option'), function(el,i) { el.removeAttribute('selected') });
        cm.style.display = 'block';
        cm.style.opacity = 0;
        cm.style.top = e.pageY-3+"px";
        cm.style.left = e.pageX-3+"px";
        fadeIn(cm,Monaba.cnf.animationSpeed);
    };

    cm.onmouseleave = function() { fadeOut(cm,Monaba.cnf.animationSpeed, function(){ cm.style.display='none' }); };
    cm_select.onchange = function() {
        var lang = this.value.toString();
        if (lang && lang != '') {
            insertTag('[code='+lang.split(',')[0]+']','[/code]',formId);
            countSymbols(formId);
        }
        fadeOut(cm,Monaba.cnf.animationSpeed, function(){ cm.style.display='none' });
    };
}
//-----------------------------------------------------------------
// Edit form
//-----------------------------------------------------------------
function showEditForm(postId) {
    var post = document.getElementById('p'+postId);
    var localId = post.dataset.postLocalId;
    var board   = post.dataset.board;
    if (post.querySelector('#edit-form') != null)
        return false;
    var ef = document.getElementById('edit-form');
    
    insertAfter(ef, post);
    var ta = document.querySelector('#edit-form textarea');
    var ps = document.querySelector('#edit-form input[type=password]');
    var hd = document.querySelector('#edit-form input[type=hidden]');
    var pt = document.querySelector('#edit-form input[type=number]');
    document.getElementById('edit-button').onclick = function() {
        var obj = {};
        obj[ ta.name ] = ta.value;
        obj[ ps.name ] = ps.value;
        obj[ hd.name ] = hd.value;
        obj[ pt.name ] = postId;
        var pmsg = popupMessage(#{toJSON $ msgrender MsgLoading}, null, true);
        var request = new XMLHttpRequest();
        request.open('POST','@{PostEditR}', true);
        request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');
        request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        request.onload = function() {
            closePopupMessage(pmsg);
            if (request.status >= 200 && request.status < 400) {
                var response = JSON.parse(request.responseText);
                if (response.ok) {
                    var request1 = new XMLHttpRequest(); // update post
                    request1.open('GET',"/ajax/post/"+board+"/"+localId, true);
                    request1.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                    request1.onload = function() {
                        hideEditForm();
                        var newPost = parseDOMElement(request1.responseText);
                        initOnePost(newPost);
                        post.parentNode.replaceChild(newPost, post);
                        makeRefmap();
                        initPopupsCache();
                        refreshMathjax();
                    
                        popupMessage(response.ok, Monaba.cnf.popupMessageDelay);
                    };
                    request1.send();
                } else {
                    popupMessage(response.error, Monaba.cnf.popupMessageDelay);
                }
            } else {
                popupMessage(request.responseText+" ("+request.status+")", 0, false, true);
            }
        };
        request.onerror = function() {
            popupMessage(#{toJSON $ msgrender MsgConnectionError}+" ("+request.statusText+")", 0, false, true);
        };
        request.send(json2urlencode(obj));
    };

    var request3 = new XMLHttpRequest();  // get raw post message
    request3.open('GET', '/ajax/post/'+board+'/'+localId, true);
    request3.setRequestHeader('Accept', 'application/json');
    request3.onload = function() {
        if (request3.status >= 200 && request3.status < 400) {
            var data = JSON.parse(request3.responseText);
            var raw = data[0].rawMessage;
            ta.value = raw;
            countSymbols('edit-form');
            ef.style.display = 'table';
        } else {
            hideEditForm();
        }
    };
    request3.onerror = function() {
        hideEditForm();
    };
    request3.send();
}

function hideEditForm() {
    var ef = document.getElementById('edit-form');
    ef.style.display = 'none';
    document.querySelector('#edit-form textarea').value = '';
    document.querySelector('#edit-form input[type=number]').value = '';
}
//-----------------------------------------------------------------
// webm
//-----------------------------------------------------------------
function addVideoPlayer(post) {
    var links = post.querySelectorAll(".video");
    Array.prototype.forEach.call(links, function(link) {
        link.onclick = function(){
            link.style.display = 'none';
            var video = document.createElement("video");
            video.controls = true;
            if (Monaba.cnf.video.autoplay)
                video.autoplay = 'autoplay';
            if (Monaba.cnf.video.loop)
                video.loop = 'loop';
            if (Monaba.cnf.video.scale)
                video.width = link.width*Monaba.cnf.video.scale;
            var source = document.createElement("source");
            source.src = link.dataset.url;
            video.appendChild(source);
            link.parentNode.appendChild( video );
        };
    });
}

function initVideoPlayer(selector) {
    var posts = document.querySelectorAll(selector ? selector : ".reply-post, .op-post");
    Array.prototype.forEach.call(posts, addVideoPlayer);
}

//-----------------------------------------------------------------
// youtube
//-----------------------------------------------------------------
function initUrlVideoPlayer(selector) {
    var posts = document.querySelectorAll(selector ? selector : ".reply-post, .op-post");
    Array.prototype.forEach.call(posts, addUrlVideoPlayer);
}

function addUrlVideoPlayer(post) {
    if (!Monaba.cnf.youtube.enable) return;
    var postId = post.id;
    var first = true;
    var links = post.querySelectorAll(".message a");
    var msg    = post.querySelector(".message");
    Array.prototype.forEach.call(links, function(link) {
        var regex = /https?:\/\/(?:www\.)?youtu(?:be\.com|\.be)\/(?:watch\?v=)?([\w_-]+)/;
        var result = regex.exec(link.text);
        if (!result) return true;
        var videoId = result[1];
        var url     = link.text;
        var first1 = false;
        if (first) {
            var d = document.createElement("div");
            d.className = "video-container";
            msg.insertBefore(d, msg.firstChild);
            first = false;
            first1 = true;
        }
        var handle = function(data){
            var width  = Monaba.cnf.youtube.width || data.entry.media$group.media$thumbnail[2].width;
            var height = Monaba.cnf.youtube.height || data.entry.media$group.media$thumbnail[2].height;
            var title  = Monaba.cnf.youtube.loadTitles && data ? data.entry.title.$t : url;
            var thumb  = "https://i.ytimg.com/vi/"+videoId+"/0.jpg"
            var iframe =  document.createElement("iframe");
            iframe.width = width;
            iframe.height = height;
            link.className = 'video-link';
            link.innerHTML = "<i class='fa fa-youtube-play'></i>"+title;
            var loadIframe = function () {
                iframe.src = "https://www.youtube.com/embed/" + videoId + "?&autohide=1&border=0&wmode=opaque&enablejsapi=1" +
                    (Monaba.cnf.youtube.html5 ? "&html5=1" : "");
                addClass(iframe, "loaded");
            };
            iframe.style.display = 'none';
            if (first1) {
                var vc = post.querySelector(".video-container");
                var vt = document.createElement("img");
                vt.className = 'video-thumb';
                vt.width = width;
                vt.height = height;
                vt.src = thumb;
                vc.insertBefore(vt, vc.firstChild);
                vc.insertBefore(iframe, vc.firstChild);
                addClass(link,"focused");
                vt.onclick = function() {
                    vt.style.display = 'none';
                    iframe.style.display = 'inline-block';
                };
                loadIframe();
            } else {
                link.insertBefore(iframe, link.firstChild);
            }

            link.onclick = function(event) {
                var iframe = link.getElementsByTagName('iframe')[0];
                if (/focused/.test(link.className))
                    return false;
                if (! /loaded/.test(iframe.className) )
                    loadIframe();
                
                var videoContainer = post.getElementsByClassName("video-container")[0];
                var currentIframe  = videoContainer.getElementsByTagName("iframe")[0];
                var videoThumb     = videoContainer.getElementsByClassName("video-thumb")[0];
                var focusedLink    = post.getElementsByClassName("focused")[0];
                focusedLink.insertBefore(currentIframe, focusedLink.firstChild);
                currentIframe.style.display = 'none';
                videoThumb.style.display = 'none';
                removeClass(focusedLink,"focused");
                videoContainer.insertBefore(iframe, videoContainer.firstChild);
                addClass(link, "focused");
                iframe.style.display = 'inline-block';
                return false;
                event.preventDefault();
            };

        };
        if (Monaba.cnf.loadTitles || !Monaba.cnf.youtube.height || !Monaba.cnf.youtube.height) {
            var request = new XMLHttpRequest({mozSystem: true});
            request.open("GET","https://gdata.youtube.com/feeds/api/videos/"+ videoId +"?v=2&alt=json",true);
            request.onload = function() { handle( JSON.parse(request.responseText) ) };
            request.onerror = function() {
                popupMessage(#{toJSON $ msgrender MsgConnectionError}+" ("+request.statusText+")", 0, false, true);
            };
            request.send();
        } else {
            handle();
        }
    });
}
//-----------------------------------------------------------------
// Images
//-----------------------------------------------------------------
function initImageExpanding(selector) {
    var s = selector ? selector : '.reply-post, .op-post';
    Array.prototype.forEach.call(document.querySelectorAll(s), expandImage);
}

function expandImage(post) {
    var files = post.querySelectorAll(".file, .multi-file");
    Array.prototype.forEach.call(files, function(file) {
        var thumbImg = file.getElementsByTagName("img")[0];
        var fullUrl  = thumbImg.dataset.url;
        if (!(/.+\.(jpg|jpeg|png|gif)/i.test(fullUrl)))
            return false;
        var thumbUrl = thumbImg.src;
        var thumbWidth = thumbImg.width;
        var thumbHeight = thumbImg.height;
        thumbImg.onclick = function(event) {
            if (event.which == 2 || event.which == 3)
                return true;
            console.log(thumbImg.src);
            console.log(fullUrl);
            if (new RegExp(fullUrl).test(thumbImg.src)) {
                thumbImg.src = thumbUrl;
                thumbImg.onload = function() {
                    thumbImg.style.width = '';
                    thumbImg.setAttribute('width', thumbWidth);
                    thumbImg.setAttribute('height', thumbHeight);
                };
            } else {
                addClass(thumbImg, 'image-loading');
                thumbImg.onload = function() {
                    removeClass(thumbImg, 'image-loading');
                    thumbImg.removeAttribute('width');
                    thumbImg.removeAttribute('height');
                    thumbImg.style.width = '100%';
                };
                thumbImg.src = fullUrl;
            }
            event.preventDefault();
        };
    });
}
//-----------------------------------------------------------------
// popup messages
//-----------------------------------------------------------------
function popupMessage(text, delay, loadingIcon, close) {
    var container = document.getElementById("popupMessageContainer");
    if (container == null) {
        container = document.createElement("div");
        container.id = "popupMessageContainer";
        document.body.appendChild(container);
    }

    var msg = document.createElement("div");
    msg.className = 'popupMessage';

    if (loadingIcon) {
        var icon = document.createElement("i");
        icon.className = 'fa fa-refresh fa-spin';
        msg.appendChild(icon);
    }

    var textContainer = document.createElement("div");
    textContainer.className = 'popupMessageText';
    textContainer.innerHTML = text;
    msg.appendChild(textContainer);

    if (close) {
        var cpm = document.createElement("div");
        cpm.className = 'closePopupMessage';
        var l = document.createElement("a");
        l.innerHTML = "✖ ";
        l.onclick = function() {
            fadeOut(msg,Monaba.cnf.animationSpeed, function(){ msg.parentNode.removeChild(msg); });
        };
        cpm.appendChild(l);
        msg.appendChild(cpm);
    }
    container.appendChild(msg);
    fadeIn(msg, Monaba.cnf.animationSpeed);
    if (delay) {
        var t = setTimeout(function(){
            fadeOut(msg,Monaba.cnf.animationSpeed, function(){ msg.parentNode.removeChild(msg); } );
        }, delay);
    }
    return msg;
}

function closePopupMessage(msg) {
    fadeOut(msg, Monaba.cnf.animationSpeed, function(){ msg.parentNode.removeChild(msg) });
}
// //-----------------------------------------------------------------
// function expandPost(postId) {
//     if ($('#'+postId+' .message.abbreviated').length == 0)
//         postId = 'popup-'+postId;
//     $('#'+postId+' .message.abbreviated').removeClass('abbreviated');
//     $('#'+postId+' .expand-post').hide();
//     $('#'+postId+' .shrink-post').show();
// }

// function shrinkPost(postId) {
//     if ($('#'+postId+' .message').length == 0)
//         postId = 'popup-'+postId;
//     $('#'+postId+' .message').addClass('abbreviated');
//     $('#'+postId+' .expand-post').show();
//     $('#'+postId+' .shrink-post').hide();
// }
//-----------------------------------------------------------------
// Post higlighting
//-----------------------------------------------------------------
function checkHighlighted() {
    var postId = window.location.hash.substr(1);
    if (postId) {
        highlightPost(postId);
    }
}

function highlightPost(postId) {
    Array.prototype.forEach.call(document.querySelectorAll('.highlighted-post'), function(el, i) {
        removeClass(el,'highlighted-post');
    });
    var p = document.getElementById(postId);
    if (! hasClass(p,'op-post') ) {
        addClass(p, 'highlighted-post');
    }
}
//-----------------------------------------------------------------
// Reference map
//-----------------------------------------------------------------
function makeRefmap(postSelector) {
    var selector = postSelector ? postSelector : ".reply-post, .op-post";
    var posts = document.querySelectorAll(selector);
    Array.prototype.forEach.call(posts, function(el, i) {
        var postId   = /p(?:opup-)?(\d+)/.exec( el.id )[1];        
        var localId  = el.dataset.postLocalId;
        var board    = el.dataset.board;
        var threadId = el.dataset.threadLocalId;
        var links    = el.querySelectorAll('.message a');
        for (var i = 0; i < links.length; i++) {
            var match = /(?:##|&gt;&gt;)(\d+)/.exec( links[i].innerHTML );
            if (match) {
                var refId = links[i].dataset.postId;
                if (! Monaba.refMap[refId]) {
                    Monaba.refMap[refId] = [];
                }
                var link = "/thread/"+board+"/"+threadId+"#"+localId;
                var postUrl = "<a data-post-id="+postId+" data-post-local-id="+localId+" data-board='"+board+"' data-thread-local-id="+threadId+" onmouseover=\"showPopupPost(this, event,"+postId+","+localId+",'"+board+"')\" onclick='highlightPost("+postId+")' href='"+link+"'>>>"+localId+"</a>";
                if (! Monaba.refMap[refId].contains(postUrl))
                    Monaba.refMap[refId].push(postUrl);
            }
        }
    });
    Array.prototype.forEach.call(posts, function(el, i) {
        Array.prototype.forEach.call(el.querySelectorAll(".refmap-list"), function(el2){ el.removeChild(el2) });

        var postId = /p(?:opup-)?(\d+)/.exec( el.id )[1];
        var allLinks = Monaba.refMap[postId];
        if (!allLinks) return "";
        var result = "";
        for (var i = 0; i < allLinks.length; i++) {
            result += " " + allLinks[i];
            if (i != allLinks.length-1) {
                result += ",";
            }
        }
        if (result) {
            var c = document.createElement("span");
            c.className = 'refmap-list';
            c.innerHTML = #{toJSON $ msgrender MsgReplies} + result;
            el.appendChild(c);
        }
    });
}
//-----------------------------------------------------------------
// popup posts
//-----------------------------------------------------------------
function cachePopupPost(el) {
    var postId   = /p(?:opup-)?(\d+)/.exec( el.id )[1];
    var localId  = el.dataset.postLocalId;
    var board    = el.dataset.board;
    var threadId = el.dataset.threadLocalId;

    var post = el.cloneNode(true);
    post.className = 'popup-post';
    post.id = 'popup-'+postId;
    
    var closeAllPopup = "<i onclick='closePopupPost()' title='"+#{toJSON $ msgrender MsgCloseAllPopupIcon}+"' class='fa fa-times-circle'></i>";
    var closeOnePopup = "<i onclick='closePopupPost(\""+postId+"\")' title='"+#{toJSON $ msgrender MsgCloseOnePopupIcon}+"' class='fa fa-times'></i>";
    var closePopups = closeAllPopup+" "+closeOnePopup;
    var span = document.createElement('span');
    span.className = 'close-popup-container';
    span.innerHTML = closePopups;
    post.appendChild(span);
    post.onclick = function() { post.style['z-index'] = Monaba.zindex + 1; Monaba.zindex += 1; };
    Monaba.postCache[postId] = post;
    return post;
}

function initPopupsCache(selector) {
    var s = selector ? selector : '.reply-post, .op-post';
    Array.prototype.forEach.call(document.querySelectorAll(s), cachePopupPost);
}

function displayPopupPost(event, post) {
    document.body.appendChild(post);
    post.style["z-index"] = -999999; // offsetHeight and offsetWidth won't work otherwise

    var wHeight = + window.innerHeight;
    var wWidth  = + window.innerWidth;
    var pHeight = + post.offsetHeight;
    var pWidth  = + post.offsetWidth;

    var cursorY = + event.pageY;
    var cursorX = + event.pageX;
    var diffH   = + window.scrollY;
    post.style.left = cursorX + "px";
    post.style.top  = cursorY + "px";
    if (cursorY + pHeight > wHeight + diffH) {
        post.style.top = (cursorY - pHeight) + "px";
    }
    if ((cursorX + pWidth) > wWidth) {
        post.style.left = (cursorX - pWidth) + "px";
    }
    post.style["z-index"] = Monaba.zindex;
}

function showPopupPost(element, event, postId, localId, board) {
    if (!Monaba.postCache[postId]) {
        var request = new XMLHttpRequest();
        request.open('GET',"/ajax/post/"+board+"/"+localId,true);
        request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        request.onload = function() {
            if (request.status >= 200 && request.status < 400) {
                var el = parseDOMElement(request.responseText);
                var post = cachePopupPost(el);
                var t = setTimeout(function(){ displayPopupPost(event, post); }, Monaba.cnf.popupPostDelay);
                element.onmouseleave = function() { clearTimeout(t) };
            } else {
                popupMessage(request.responseText+" ("+request.status+")", 0, false, true);
            }
        };
        request.onerror = function() {
            popupMessage(#{toJSON $ msgrender MsgConnectionError}+" ("+request.statusText+")", 0, false, true);
        };
        request.send();
    } else {
        var post = Monaba.postCache[postId];
        var t = setTimeout(function(){ displayPopupPost(event, post); }, Monaba.cnf.popupPostDelay);
        element.onmouseleave = function() { clearTimeout(t) };
    }
}

function closePopupPost(post) {
    if (post) {
        var p = document.getElementById('popup-'+post);
        p.parentNode.removeChild(p);
    } else {
        var posts = document.getElementsByClassName('popup-post');
        while (posts.length) {
            posts[0].parentNode.removeChild(posts[0]);
        }
    }
}
//-----------------------------------------------------------------
function refreshThread(board, threadLocalId) {
    var allPosts = document.querySelectorAll("#thread-"+threadLocalId+" .reply-post");
    var lastPost = allPosts[ allPosts.length - 1 ];
    if (! lastPost) {
        lastPost = document.querySelector("#thread-"+threadLocalId+" .op-post");
    }
    var lastPostId = lastPost.dataset.postLocalId;
    var ictr = document.querySelector(".delete-form .icon-thread-refresh");
    var ajxl = document.querySelector(".delete-form .ajax-loading");
    if (ictr != null) toggleInline(ictr);
    if (ajxl != null) toggleInline(ajxl);

    var request = new XMLHttpRequest();
    request.open('GET',"/ajax/thread/"+board+"/"+threadLocalId+"/new/"+lastPostId, true);
    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    request.onload = function() {
        if (ictr != null) toggleInline(ictr);
        if (ajxl != null) toggleInline(ajxl);
        if (request.status >= 200 && request.status < 400) {
            var data = request.responseText;
            if (/reply/.test(data)) {
                var posts = parseDOMElements(data);
                var thr   = document.getElementById("thread-"+threadLocalId);
                for (var i = 0; i < posts.length; i++) {
                    initOnePost(posts[i]);
                    thr.appendChild(posts[i]);
                }
                makeRefmap();
                initPopupsCache();
                refreshMathjax();
            } else if (data == "No such thread ") {
                popupMessage(#{toJSON $ msgrender MsgThreadNotExist}, Monaba.cnf.popupMessageDelay);
            } else if (data == "No new posts ") {
                popupMessage( #{toJSON $ msgrender MsgNoNewPosts}, Monaba.cnf.popupMessageDelay);
            }
        } else {
            popupMessage(request.responseText+" ("+request.status+")", 0, false, true);
        }
    };
    request.onerror = function() {
        popupMessage(#{toJSON $ msgrender MsgConnectionError}+" ("+request.statusText+")", 0, false, true);
    };
    request.send();
}
// ---------------------------------------------------------
//  wakaba3.js
// ---------------------------------------------------------
function get_cookie(name)
{
    if (document.cookie)
    {
        var regexp = new RegExp("(^|;\\s+)" + name + "=(.*?)(;|$)");
        var hit = regexp.exec(document.cookie);
        if(hit && hit.length > 2)
            return unescape(hit[2]);
        else
            return '';
    }
}

function set_cookie(name,value,days)
{
    if(days)
    {
        var date = new Date();
        date.setTime(date.getTime() + (days*24*60*60*1000));
        var expires = "; expires="+ date.toGMTString();
    } else {
        expires="";
    }       
    document.cookie = name + "=" + value + expires + "; path=/";
}  
// ---------------------------------------------------------
//  end of wakaba3.js
// ---------------------------------------------------------

// ---------------------------------------------------------
// Storage
// ---------------------------------------------------------
function getItem(k) {
    return JSON.parse( typeof(Storage) == 'undefined' ?
                       get_cookie(k) :
                       localStorage.getItem(k)
                     );
}
function setItem(k,v) {
    typeof(Storage) == 'undefined' ?
        set_cookie(k, JSON.stringify(v)) :
        localStorage.setItem(k, JSON.stringify(v));
    return true;
}
// ---------------------------------------------------------
// Misc
// ---------------------------------------------------------
function fadeIn(el,n,callback) {
    el.style.opacity = 0;

    var last = +new Date();
    var tick = function() {
        el.style.opacity = +el.style.opacity + (new Date() - last) / n;
        last = +new Date();

        if (+el.style.opacity < 1) {
            (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16)
        } else {
            if (callback) callback.apply(this,[el]);
        }
    };

    tick();
}

function fadeOut(el,n,callback) {
    el.style.opacity = 1;

    var last = +new Date();
    var tick = function() {
        el.style.opacity = +el.style.opacity - (new Date() - last) / n;
        last = +new Date();

        if (+el.style.opacity > 0) {
            (window.requestAnimationFrame && requestAnimationFrame(tick)) || setTimeout(tick, 16)
        } else {
            if (callback) callback.apply(this,[el]);
        }
    };

    tick();
}

// ---------------------------------------------------------
// Helpers
// ---------------------------------------------------------
function hasClass(el, cl) {
    return new RegExp('(?:^|\s)'+cl+'( |$)', 'gi').test(el.className);
}

function removeClass(el, cl) {
    // el.className = el.className.replace(new RegExp('(?:^|\s)'+cl+'(?!\S)'), '');
    el.className = el.className.replace(new RegExp(cl), '');
}

function addClass(el, cl) {
    el.className += ' '+cl;
}

function toggleBlock(el) {
    if (el.style.display == 'none') {
        el.style.display = 'block';
    } else {
        el.style.display = 'none';
    }
}

function toggleInline(el) {
    if (el.style.display == 'none') {
        el.style.display = 'inline-block';
    } else {
        el.style.display = 'none';
    }
}

function insertAfter(el, el2) {
    el2.parentNode.insertBefore( el, el2.nextSibling );
}

function json2urlencode(data) {
    return Object.keys(data).map(function(k) {
        return encodeURIComponent(k) + '=' + encodeURIComponent(data[k])
    }).join('&');
}

function parseDOMElement(data) {
    return new DOMParser().parseFromString(data,"text/html").body.firstChild;
}

function parseDOMElements(data) {
    return new DOMParser().parseFromString(data,"text/html").body.children;
}
