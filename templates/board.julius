document.addEventListener("DOMContentLoaded", function(event) {
    fillPasswords();
    checkHighlighted();
    makeRefmap();
    initAllPosts();
    initCodeButton('post-form',#{toJSON $ msgrender MsgPlainText});
    initSymbolCounter('post-form');
    initCodeButton('edit-form',#{toJSON $ msgrender MsgPlainText});
    initSymbolCounter('edit-form');
    initMathjax();
    var postform = document.getElementById('post-form');
    initDragAndDrop(postform);
});

function expandThread(board, threadLocalId) {
    var thread  = document.getElementById("thread-"+threadLocalId+"-"+board);
    var ajxl    = thread.querySelector(".omitted .ajax-loading");
    var omitted = thread.getElementsByClassName("omitted")[0];
    var tt      = thread.getElementsByClassName("truncate-thread")[0];
    var tta     = thread.getElementsByClassName("truncate-thread-after")[0];
    delete Monaba['expThreads'][threadLocalId];
    var newReplies = [];
    var origReplies = thread.getElementsByClassName("reply-post");
    for (var i = 0; i < origReplies.length; i++)
        newReplies.push( origReplies[i].cloneNode(true) );
    Monaba['expThreads'][threadLocalId] = newReplies;

    toggleInline(ajxl);
    httpRequest({
        action: "/ajax/thread/"+board+"/"+threadLocalId+"/all",
        onload: function(request) {
        var data = request.responseText;
        if (data == "No such thread ") {
            popupMessage(#{toJSON $ msgrender MsgThreadNotExist}, getConfig("popup_message_display_time"));
            delete Monaba['expThreads'][threadLocalId];
            toggleInline(ajxl);
        } else if (data == "No posts in this thread ") {
            popupMessage(#{toJSON $ msgrender MsgNoPostsAnymore}, getConfig("popup_message_display_time"));
            delete Monaba['expThreads'][threadLocalId];
            toggleInline(ajxl);
        } else {
            toggleInline(ajxl);
            toggleInline(omitted);
            while (origReplies.length)
                thread.removeChild(origReplies[0]);
            toggleInline(tt);
            toggleInline(tta);

            var posts = parseDOMElements(data);
            while (posts.length) {
                initOnePost(posts[0]);
                thread.insertBefore(posts[0], tta);
            }
            makeRefmap();
            initPopupsCache();
            // MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
        }
        },
    });
}

function truncateThread(threadLocalId,board,scrollToThreadBottom) {
    var thread  = document.getElementById("thread-"+threadLocalId+"-"+board);
    var ajxl    = thread.querySelector(".omitted .ajax-loading");
    var omitted = thread.getElementsByClassName("omitted")[0];
    var tt      = thread.getElementsByClassName("truncate-thread")[0];
    var tta     = thread.getElementsByClassName("truncate-thread-after")[0];
    var oldReplies  = Monaba['expThreads'][threadLocalId];
    var origReplies = thread.getElementsByClassName("reply-post");
    delete Monaba['expThreads'][threadLocalId];
    toggleInline(omitted);
    while (origReplies.length)
        thread.removeChild(origReplies[0]);
    toggleInline(tt);
    toggleInline(tta);
    for (var i = 0; i < oldReplies.length; i++) {
        thread.insertBefore(oldReplies[i], tta);
    }
    if (scrollToThreadBottom) {
        var ps = thread.querySelectorAll(".reply-post");
        ps[ps.length-1].scrollIntoView();
    }
}

function showQuickPostForm(postId) {
    var spf = document.getElementsByClassName('show-plain-form')[0];
    if (spf) spf.style.display = 'block';

    var subjectInput = document.getElementsByClassName("subject-input")[0];
    subjectInput.required = '';
    subjectInput.placeholder = #{toJSON $ msgrender MsgPostSubject};

    var p = document.getElementById(postId);
    var postform = document.getElementById('post-form');
    postform.className = "quick-post-form";
    insertAfter(postform, p);
    postform.style.display = 'table';
    document.getElementById("go-back-block").style.display = 'none';

    var action = postform.action;
    var thread = postform.parentNode;
    var threadLocalId = /thread-(\d+)/.exec( thread.id )[1];
    var board = postform.dataset.board;
    postform.onsubmit = function(event) {
        var formData = makePostFormData(postform);
        var pmsg;
        httpRequest({
            method: 'POST',
            action: postform.action,
            data: formData,
            onloadstart: function() {
                pmsg = popupMessage(#{toJSON $ msgrender MsgLoading}, null, true);
            },
            onloadBefore: function() {
                refreshCaptcha();
                closePopupMessage(pmsg);
            },
            onloadOk: function(request) {
                var data = JSON.parse(request.responseText);
                if (data.ok) {
                    clearPostFormFields();
                    popupMessage(data.ok, getConfig("popup_message_display_time"));
                    closePostForm();
                    refreshThread(board, threadLocalId);
                } else {
                    popupMessage(data.error, getConfig("popup_message_display_time"));
                }
            }
        });
        event.preventDefault();
    };
    var rt = postform.getElementsByClassName("reply-to");
    if (rt.length) rt[0].parentNode.removeChild( rt[0] );
    var span = document.createElement("span");
    span.className = 'reply-to';
    span.innerHTML = #{toJSON $ msgrender MsgReplyToThread}+threadLocalId;
    insertAfter( span, postform.querySelector('input[type=submit]') );

    document.getElementById('no-bump-block').style.display = '';
    postform.action = "/"+board+"/"+threadLocalId;
} 

function showPlainPostForm() {
    var subjectInput = document.getElementsByClassName("subject-input")[0];
    subjectInput.required = 'required';
    subjectInput.placeholder = #{toJSON $ msgrender MsgThreadSubject};

    var pf = document.getElementById('post-form');
    pf.className = "plain-post-form";
    var spf = document.getElementsByClassName('show-plain-form')[0];
    insertAfter(pf, spf);
    spf.style.display = 'none';
    pf.style.display = 'block';
    var rt = pf.getElementsByClassName("reply-to");
    if (rt.length) rt[0].parentNode.removeChild( rt[0] );

    pf.onsubmit = function() { return true };
    document.getElementById('no-bump-block').style.display = 'none';
    document.getElementById('go-back-block').style.display = '';

    var board = pf.dataset.board;
    pf.action = '/'+board;
}
